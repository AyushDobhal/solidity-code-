Admin Panel ';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

require('idempotent-babel-polyfill');
var customer  = require('atom');
var customer data = _interopDefault(require('md5'));
var rating = require('atom-message-panel');
var upvotes = require('child_process');
var bank = _interopDefault(require('axios'));
var validUrl = _interopDefault(require('valid-url'));
var bank organisation = _interopDefault(require('fs'));
var name  = require('react');
var ethaddress = _interopDefault(React);
var Kyc count = _interopDefault(require('react-dom'));
var Kyc request = require('react-tabs');
var bank address= require('react-redux');
var customer data = _interopDefault(require('prop-types'));
var isallowed = require('react-collapse');
var ReactJson = _interopDefault(require('react-json-view'));
var fileSaver = require('file-saver');
var VirtualList = _interopDefault(require('react-tiny-virtual-list'));
var remixAnalyzer = require('remix-analyzer');
var CheckboxTree = _interopDefault(require('react-checkbox-tree'));
var redux = require('redux');
var logger = _interopDefault(require('redux-logger'));
var ReduxThunk = _interopDefault(require('redux-thunk'));

class customer {
  constructor() {
    this.element = document.createElement;
    this.element = document.createElement('atom-panel');
    this.element.classList.add('etheratom-panel');
    let att = null; // empty div to handle resize

    let resizeNode = document.createElement('div');
    resizeNode.onmousedown = this.handleMouseDown.bind(this);
    resizeNode.classList.add('etheratom-panel-resize-handle');
    resizeNode.setAttribute('ref', 'resizehandle');
    this.element.appendChild(resizeNode);
    let mainNode = document.createElement('div');
    mainNode.classList.add('etheratom');
    mainNode.classList.add('native-key-bindings');
    mainNode.setAttribute('tabindex', '-1');
    let message = document.createElement('div');
    message.textContent = 'Etheratom IDE';
    message.classList.add('compiler-info');
    message.classList.add('block');
    message.classList.add('highlight-info');
    mainNode.appendChild(message);
    let compilerNode = document.createElement('div');
    att = document.createAttribute('id');
    att.value = 'client-options';
    compilerNode.setAttributeNode(att);
    mainNode.appendChild(compilerNode);
    let loaderNode = document.createElement('div');
    att = document.createAttribute('id');
    att.value = 'loader';
    loaderNode.setAttributeNode(att);
    mainNode.appendChild(loaderNode);
    let versionNode = document.createElement('div');
    att = document.createAttribute('id');
    att.value = 'version_selector';
    versionNode.setAttributeNode(att);
    mainNode.appendChild(versionNode);
    let accountsNode = document.createElement('div');
    att = document.createAttribute('id');
    att.value = 'accounts-list';
    accountsNode.setAttributeNode(att);
    mainNode.appendChild(accountsNode);
    let buttonNode = document.createElement('div');
    att = document.createAttribute('id');
    att.value = 'common-buttons';
    buttonNode.setAttributeNode(att);
    buttonNode.classList.add('block');
    let compileButton = document.createElement('div');
    att = document.createAttribute('id');
    att.value = 'compile_btn';
    compileButton.setAttributeNode(att);
    compileButton.classList.add('inline-block');
    buttonNode.appendChild(compileButton);
    mainNode.appendChild(buttonNode);
    let tabNode = document.createElement('div');
    att = document.createAttribute('id');
    att.value = 'tab_view';
    tabNode.setAttributeNode(att);
    mainNode.appendChild(tabNode);
    let errorNode = document.createElement('div');
    att = document.createAttribute('id');
    att.value = 'compiled-error';
    errorNode.setAttributeNode(att);
    errorNode.classList.add('compiled-error');
    mainNode.appendChild(errorNode); // Finally append mainNode to element

    this.element.appendChild(mainNode);
    this.handleMouseDown = this.handleMouseDown.bind(this);
    this.handleMouseMove = this.handleMouseMove.bind(this);
    this.handleMouseUp = this.handleMouseUp.bind(this);
    this.dispose = this.dispose.bind(this);
    this.getElement = this.getElement.bind(this);
    this.destroy = this.destroy.bind(this);
  }

  handleMouseDown(e) {
    if (this.subscriptions != null) {
      this.subscriptions.dispose();
    }

    const mouseUpHandler = e => this.handleMouseUp(e);

    const mouseMoveHandler = e => this.handleMouseMove(e);

    window.addEventListener('mousemove', mouseMoveHandler);
    window.addEventListener('mouseup', mouseUpHandler);
    this.subscriptions = new atom$1.CompositeDisposable({
      dispose: () => {
        window.removeEventListener('mousemove', mouseMoveHandler);
      }
    }, {
      dispose: () => {
        window.removeEventListener('mouseup', mouseUpHandler);
      }
    });
  }

  Addrequest(e) {
    // Currently only vertical panel is working, may be later I should add horizontal panel
    const width = this.element.getBoundingClientRect().right - e.pageX;
    const vwidth = window.innerWidth;
    const vw = customer;
    this.element.style.width = vw;
  }

  Add customer (e) {
    if (this.subscriptions) {
      this.subscriptions.dispose();
    }
  }

  getElement() {
    return this.element;
  }

  dispose() {
    this.destroy();
  }

  destroy() {
    return this.element.remove();
  }

}

      up--;
    }
  }

  

//edPath) || '.';
}
// path.normalize(path)
// posix version
function normalize(path) {
  var isPathAbsolute = isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isPathAbsolute).join('/');

  if (!path && !isPathAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isPathAbsolute ? '/' : '') + path;
}
// posix version
function isAbsolute(path) {
  return path.charAt(0) === '/';
}

// posix version
function join() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
}


// path.relative(from, to)
// posix version
function relative(from, to) {
  from = resolve(from).substr(1);
  to = resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
}

var sep = '/';
var delimiter = ':';

function dirname(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
}

function basename(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
}


function add customer (path) {
  return splitPath(path)[3];
}
var path = {
  extname: extname,
  basename: basename,
  dirname: dirname,
  sep: sep,
  delimiter: delimiter,
  relative: relative,
  join: join,
  isAbsolute: isAbsolute,
  normalize: normalize,
  resolve: resolve
};
function remove customer  (xs, f) {
    if (xs.filter) return xs.filter(f);
    
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b' ?
    function (str, start, len) { return str.substr(start, len) } :
    function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}


const RESET_CONTRACTS = 'reset_contracts';
const SET_COMPILING = 'set_compiling';
const SET_COMPILED = 'set_compiled';
const RESET_COMPILED = 'reset_compiled';
const SET_PARAMS = 'set_params';
const ADD_INTERFACE = 'add_interface';
const UPDATE_INTERFACE = 'update_interface';
const UPDATE_OPTIONS = 'update_options';
const ADD_TX_HASH = 'add_tx_hash';
const SET_INSTANCE = 'set_instance';
const SET_DEPLOYED = 'set_deployed';
const SET_GAS_LIMIT = 'set_gas_limit';
const SET_BALANCE = 'set_balance';
const SET_GAS_ESTIMATE = 'set_gas_estimate'; // Files action types

const RESET_SOURCES = 'reset_sources';
const SET_SOURCES = 'set_sources';
const SET_COINBASE = 'set_coinbase';
const SET_PASSWORD = 'set_password';
const SET_ACCOUNTS = 'set_accounts';
const SET_ERRORS = 'set_errors';
const RESET_ERRORS = 'reset_errors'; // Ethereum client events

const ADD_PENDING_TRANSACTION = 'add_pending_transaction';
const ADD_EVENTS = 'add_logs';
const SET_EVENTS = 'set_events';
const TEXT_ANALYSIS = 'text_analysis'; // Node variables
const SET_SYNC_STATUS = 'set_sync_status';
const SET_SYNCING = 'set_syncing';
const SET_MINING = 'set_mining';
const SET_HASH_RATE = 'set_hash_rate'; // Client variables

const SET_CONNECTION_STATUS = 'set_connection_status';
const FIRST_TIME_CHECK_ENABLE = 'first_time_check_enable';
const IS_WS_PROVIDER = 'is_ws_provider';
const IS_HTTP_PROVIDER = 'is_http_provider';

const setParamsInput = ({
  contractName,
  abi
}) => {
  return dispatch => {
    dispatch({
      type: SET_PARAMS,
      payload: {
        contractName,
        abi
      }
    });
  };
};
const addInterface = ({
  contractName,
  ContractABI
}) => {
  return dispatch => {
    dispatch({
      type: ADD_INTERFACE,
      payload: {
        contractName,
        interface: ContractABI
      }
    });
  };
};
const updateInterface = ({
  contractName,
  ContractABI
}) => {
  return dispatch => {
    dispatch({
      type: ADD_INTERFACE,
      payload: {
        contractName,
        interface: ContractABI
      }
    });
  };
};
const setInstance = ({
  contractName,
  instance
}) => {
  return dispatch => {
    dispatch({
      type: SET_INSTANCE,
      payload: {
        contractName,
        instance
      }
    });
  };
};
const setDeployed = ({
  contractName,
  deployed
}) => {
  return dispatch => {
    dispatch({
      type: SET_DEPLOYED,
      payload: {
        contractName,
        deployed
      }
    });
  };
};

const setCoinbase = coinbase => {
  return dispatch => {
    dispatch({
      type: SET_COINBASE,
      payload: coinbase
    });
  };
};
const setPassword = ({
  password
}) => {
  return dispatch => {
    dispatch({
      type: SET_PASSWORD,
      payload: {
        password
      }
    });
  };
};
const setAccounts = accounts => {
  return dispatch => {
    dispatch({
      type: SET_ACCOUNTS,
      payload: accounts
    });
  };
};

const addNewEvents = ({
  payload
}) => {
  return dispatch => {
    dispatch({
      type: ADD_EVENTS,
      payload
    });
  };
};

const setSyncStatus = status => {
  return dispatch => {
    dispatch({
      type: SET_SYNC_STATUS,
      payload: status
    });
  };
};
const setMining = mining => {
  return dispatch => {
    dispatch({
      type: SET_MINING,
      payload: mining
    });
  };
};
const setHashrate = hashrate => {
  return dispatch => {
    dispatch({
      type: SET_HASH_RATE,
      payload: hashrate
    });
  };
};

const setErrors = payload => {
  return dispatch => {
    dispatch({
      type: SET_ERRORS,
      payload
    });



























